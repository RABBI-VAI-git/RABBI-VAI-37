module.exports.config = {
  name: "leave",
  eventType: ["log:unsubscribe"],
  version: "2.0.0",
  credits: "ùêëùêÄùêÅùêÅùê¢‚çüùêïùêÄùêà | Modified by Akash",
  description: "Leave message with optional gif/image/video",
  dependencies: {
    "fs-extra": "",
    "path": ""
  }
};

module.exports.onLoad = function () {
  const { existsSync, mkdirSync } = global.nodemodule["fs-extra"];
  const { join } = global.nodemodule["path"];
  const paths = [
    join(__dirname, "cache", "leaveGif")
  ];
  for (const path of paths) {
    if (!existsSync(path)) mkdirSync(path, { recursive: true });
  }
};

module.exports.run = async function({ api, event, Users, Threads }) {
  const fs = require("fs");
  const path = require("path");
  const { threadID } = event;

  // ‡¶Ø‡¶¶‡¶ø ‡¶¨‡¶ü ‡¶®‡¶ø‡¶ú‡ßá ‡¶≤‡¶ø‡¶≠ ‡¶®‡ßá‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶®‡¶æ ‡¶™‡¶æ‡¶†‡¶ø‡ßü‡ßá ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßã
  if (event.logMessageData.leftParticipantFbId == api.getCurrentUserID()) return;

  const data = global.data.threadData.get(parseInt(threadID)) || (await Threads.getData(threadID)).data;
  const name = global.data.userName.get(event.logMessageData.leftParticipantFbId) || await Users.getNameUser(event.logMessageData.leftParticipantFbId);

  // ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßã ‚Äî ‡¶∏‡ßá ‡¶®‡¶ø‡¶ú‡ßá ‡¶≤‡¶ø‡¶≠ ‡¶®‡¶ø‡¶≤, ‡¶®‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶≤
  const type = (event.author == event.logMessageData.leftParticipantFbId)
    ? "‡¶§‡ßÅ‡¶á ‡¶®‡¶ø‡¶ú‡ßá‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡¶ø‡¶≠ ‡¶®‡¶ø‡¶≤‡¶ø üò§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶∏‡¶ø‡¶∏ ‡¶®‡¶æ! üö´"
    : "‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡¶æ‡¶•‡¶ø ‡¶Æ‡ßá‡¶∞‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶≤‡ßã ü§£üö™";

  // ‡¶Æ‡ßÇ‡¶≤ ‡¶≤‡¶ø‡¶≠ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü
  let msg = (typeof data.customLeave == "undefined")
    ? `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üò¢ {name} {type}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‡¶≠‡¶æ‡¶≤‡ßã ‡¶•‡¶æ‡¶ï‡¶ø‡¶∏... ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶Æ‡¶ú‡¶æ ‡¶Æ‡¶ø‡¶∏ ‡¶ï‡¶∞‡¶¨‡¶ø üòâ
‚ú¶‚îÄ‚îÄ‚îÄ‚îÄ‚îÄÍØ≠‚îÄ‚Éù‚Äå‚Äå‚òûÔ∏éÔ∏éÔ∏éùêëùêÄùêÅùêÅùê¢‚çüùêïùêÄùêà‚òúÔ∏éÔ∏éùêÇùê°ùêöùê≠ ùêÅùê®ùê≠‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶`
    : data.customLeave;

  msg = msg
    .replace(/\{name}/g, name)
    .replace(/\{type}/g, type);

  // leaveGif ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßã
  const leaveGifPath = path.join(__dirname, "cache", "leaveGif");
  const allFiles = fs.readdirSync(leaveGifPath).filter(file =>
    [".mp4", ".jpg", ".png", ".jpeg", ".gif", ".mp3"].some(ext => file.endsWith(ext))
  );

  // ‡¶è‡¶≤‡ßã‡¶Æ‡ßá‡¶≤‡ßã‡¶≠‡¶æ‡¶¨‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßã
  const selected = allFiles.length > 0
    ? fs.createReadStream(path.join(leaveGifPath, allFiles[Math.floor(Math.random() * allFiles.length)]))
    : null;

  // ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶è‡¶ü‡¶æ‡¶ö‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡¶∏‡¶π ‡¶™‡¶æ‡¶†‡¶æ‡¶ì, ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü
  return api.sendMessage(
    selected ? { body: msg, attachment: selected } : { body: msg },
    threadID
  );
};
